Git & Github Assignment


Q1. Explain what version control is and its importance in software development

Ans1. Version control is a fundamental tool which is used in software development and team projects as a record base for files. It is primarily 
used for the purpose of managing and tracking changes to files over the time.

    Importance of Git in software development :

        1 - Version control records all changes to project files, helping developers to understand why and when changes occured.
        as a Tracking system.

        2 - Serves as a backup system of the project for any error or not desired output or project crash.

        3 - Helps as central platform when multiple user use same files and results in conflict then it then it helps in resolving the conflict.

        4 - If a project crashes in other branch then it an be discarded and get back into past when it was fine.

Q2. Explain the Git Workflow, including the staging area, working directory, and repository

Ans2. The Git workflow contains three main components as working directory, staging area and repository.
    
    Workflow as :

        1. Working Directory : In includes all the files of the project in current state. Changes to files are done in this directory.

        2. Staging Area : This is platform for storing changes which are more likely to be commited after a review and may be some changes in it. 
                          The command for getting to staging area is ' git add '.

        3.  Repository : In this stage all the committed changes and the history is stored like a snapshot of project at a certain time for tracking. 

Q3. Explain what .gitignore is and why itâ€™s important in version control

Ans3. The .gitignore is a very important file for the projects as it stores the information that needs to be untracked.

    Importance : 

        1. Some files are too large and can be installed later and don't need to be tracked so untracking them saves from garbaging the repository from 
        unnecessary files.

        2. It also protects very secure data from being committed and saves from unauthorized access to that data.

        3. Ignoring unnecessary data saves the project from becoming clumsy and versions becomes more focused.

Q4. Briefly explain what GitHub is and how it facilitates collaboration and version control also name some
alternatives to GitHub.

Ans. GitHub is a web based service build on Git version control. It acts like an online central hub for all tracking and management of git with an user 
interface. It provides features like pull request, code management etc.

    Its facilitates : 

        1. It is build on top of git that allow developers to track, collaborate and manage projects online.

        2. It serves as central server for storing repos and facilitates collaboration by allowing multiple programmers to work simultaneously on one project. 

        3. It provides a very appealing UI that helps beginners to work in version controlling.

    The alternatives of github are Gitlab, Bitbucket, Launchpad, SourceForge etc. 

Q5. Describe the process of contributing to any open-source project on GitHub in a step-by-step manner.

Ans. The steps for contributing to any open-source repo is : 

    1. First go to repository that developer want to contribute and click fork button on top right. This will create copy of repo in developer's repository.

    2. In a folder in local machine, clone that repository with terminal using command :
        
        git clone "repository url"

    3. from project directory, make a new branch using command : 

        git checkout -b "branch name"

    4. now make changes to the project and stage it and check status using command :

        git add .
        git status

    5. If it shows green, then commit it using :

        git commit -m "message of commit"

    
    6. After commit, use following commands to check fork and push code to repository : 

        git remote add origin "repository url"
        git pull origin main
        git push origin "branch name"

    7. Now create a pull request by visiting own fork on Github and clicking new pull request, selecting branch with changes and main branch in the repository to merge.

    8. Write description and click create pull request. 

    9. Once changes approved, the owner of project will merge your pull request into project.

    And Done !

Q6. Deploy Tailwind projects named Youtube, slack, and Gmail clones on GitHub pages and share the deployed link of those three. Expected output - Live hosted URL Link 
of your deployed respective website with GitHub pages.

Ans. Youtube clone link - 
     Slack clone link - 
     Gmail clone link -  


    
    